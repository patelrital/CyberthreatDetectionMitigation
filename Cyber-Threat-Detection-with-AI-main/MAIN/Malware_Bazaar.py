import requests
import json
import pyzipper, io  # For zip extraction
import os

class Malware_Bazaar_Manager():

    QUERY_FILE_TYPE = 0

    def __init__(self, API:str=None):
        if API==None:
            print("Please provide Malware Bazaar API key")
            return None
        self.API_for_Header = {"API-KEY":API}
        self.API_url = "https://mb-api.abuse.ch/api/v1/"

    def Get_Samples(self, file_type:str="exe", Get_Count:int = 20) -> list:
        """Get malware samples based on file type
        
        Args:
            file_type: Type of files to retrieve (default: exe)
            Get_Count: Number of samples to retrieve (max 1000)
            
        Returns:
            List of sample metadata
        """
        if Get_Count > 1000: 
            print("Cannot exceed 1000 samples")
            return

        data = {
            'query': 'get_file_type',
            'file_type': file_type,
            'limit': f"{Get_Count}"
        }

        while True:
            try:
                response = requests.post(
                    url=self.API_url,
                    data=data, 
                    verify=False,
                    headers=self.API_for_Header
                )

                JSON_FILE = json.loads(response.text)  # May occasionally fail
                print(JSON_FILE)
                break
            except:
                continue  # Retry query

        return self.Parsing(JSON_FILE, self.QUERY_FILE_TYPE)

    def Get_FILE_bin(self, File_SHA256:str=None, FILE_save_PATH:str=None) -> (bytes, str):
        """Get binary file data by SHA256 hash
        
        Args:
            File_SHA256: SHA256 hash of file to retrieve
            FILE_save_PATH: Optional path to save file
            
        Returns:
            Tuple of (binary data, save path) or None if failed
        """
        if File_SHA256 == None:
            print("SHA256 hash required!")
            return None

        data = {'query': 'get_file', 'sha256_hash': File_SHA256}

        response = requests.post(
            url=self.API_url,
            data=data,
            verify=False, 
            headers=self.API_for_Header
        )

        try:
            JSON_FILE = json.loads(response.text)
            print("Failed to get binary data")
            return None
        except:
            try:
                FILE_BIN = b''
                result_zipped_data = response.content  # Get raw bytes
                print("Successfully retrieved zipped file, extracting...")
                
                with pyzipper.AESZipFile(io.BytesIO(result_zipped_data)) as ZF:
                    ZF.setpassword("infected".encode())

                    # Extract first file from zip (only one expected)
                    for file_name in ZF.namelist():
                        print(f"- {file_name}")
                        with ZF.open(file_name) as file:
                            FILE_BIN = file.read()
                        break

                if FILE_save_PATH != None:
                    # Check for existing file
                    FOUND_FILE_NAMES = []
                    for root, dirs, files in os.walk(f"{FILE_save_PATH}"):
                        for file_name in files:
                            FOUND_FILE_NAMES.append(file_name)

                    print(f"FOUND_FILE_NAMES->{FOUND_FILE_NAMES}")
                    
                    if f"{File_SHA256}_from_malware.exe" in FOUND_FILE_NAMES:
                        print("File already exists!")
                        return FILE_BIN, None
                    else:
                        print("Writing file...")
                        with open(f"{FILE_save_PATH}{File_SHA256}_from_malware.exe", 'wb') as f:
                            f.write(FILE_BIN)
                        return FILE_BIN, f"{FILE_save_PATH}{File_SHA256}_from_malware.exe"
                else:
                    print("Failed to write file")
                    return FILE_BIN, None

            except:
                print("Got zip but extraction failed!")
                return None, None

    def Parsing(self, data, parsing_type:int=None) -> list:
        """Parse API response data
        
        Args:
            data: JSON response data
            parsing_type: Type of parsing to perform
            
        Returns:
            List of parsed results
        """
        if parsing_type == None:
            print("Parsing type required")
            return None

        result_list: list = []

        if self.QUERY_FILE_TYPE == parsing_type:
            """
            Returns list of:
            [0]: File SHA256
            [1]: File size
            [2]: File type  
            [3]: File tags
            """
            try:
                if data["query_status"] != "ok":
                    print("[QUERY_FILE_TYPE] - Failed to get valid results")
                    return None
            except:
                print("[QUERY_FILE_TYPE] - Failed to get valid results") 
                return None

            try:
                for index, one_FILE_INFO in enumerate(data["data"]):
                    SHA256 = one_FILE_INFO["sha256_hash"]
                    FILE_SIZE = one_FILE_INFO["file_size"]
                    FILE_TYPE = one_FILE_INFO["file_type"]
                    FILE_TAG = one_FILE_INFO["tags"]

                    print(f"{SHA256} / {FILE_SIZE} / {FILE_TYPE} / {FILE_TAG}")
                    result_list.append([SHA256, FILE_SIZE, FILE_TYPE, FILE_TAG])
                return result_list
            except:
                print("[QUERY_FILE_TYPE] Error during parsing!")
                return None

        return result_list

    def Make_sample_to_DISK_for_malware_DATASET(self, file_type:str="exe", get_count:int=20, save_path:str=None)->list:
        """Download malware samples and save to disk
        
        Args:
            file_type: Type of files to retrieve
            get_count: Number of samples
            save_path: Path to save files
            
        Returns:
            List of saved file paths
        """
        if save_path == None:
            return None

        result_sample_list = self.Get_Samples(
            file_type=file_type,
            Get_Count=get_count
        )

        if result_sample_list == None:
            print("No samples retrieved!")
            return None
            
        for_return_list = []
        for one_sample_SHA256 in result_sample_list:
            print(f"one_sample_SHA256->{one_sample_SHA256}")
            
            # Get binary and save to disk
            result_BIN = self.Get_FILE_bin(
                File_SHA256=str(one_sample_SHA256[0]),
                FILE_save_PATH=save_path
            )
            if (result_BIN[1] != None):
                for_return_list.append(result_BIN[1])

        print(for_return_list)
        return for_return_list

# Example usage commented out
'''
a = Malware_Bazaar_Manager(
    API="Please Input API key~"
)
GET_SAMPLE_list = a.Get_Samples(
    Get_Count=2
)

if GET_SAMPLE_list==None:
    print("GET_SAMPLE_list is None!")
    quit()

for GET_SAMPLE in GET_SAMPLE_list:
    FILE_BIN = a.Get_FILE_bin(
        File_SHA256=GET_SAMPLE[0],
        FILE_save_PATH=None
    )
'''
